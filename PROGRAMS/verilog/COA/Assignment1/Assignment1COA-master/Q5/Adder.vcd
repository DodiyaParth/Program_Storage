$date
	Mon Oct 16 21:46:23 2017
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module t_Adder $end
$var wire 1 ! carry $end
$var wire 1 " sum $end
$var integer 32 # i [31:0] $end
$var reg 1 $ imm $end
$var reg 4 % n1 [3:0] $end
$var reg 4 & n2 [3:0] $end
$var reg 1 ' op1 $end
$var reg 1 ( op2 $end
$var reg 1 ) op3 $end
$scope module inst $end
$var wire 1 ! carry $end
$var wire 1 * i1carry $end
$var wire 1 + i2carry $end
$var wire 1 , isum $end
$var wire 1 - op1 $end
$var wire 1 . op2 $end
$var wire 1 / op3 $end
$var wire 1 " sum $end
$scope module inst1 $end
$var wire 1 - op1 $end
$var wire 1 . op2 $end
$var reg 1 0 carry $end
$var reg 1 1 sum $end
$upscope $end
$scope module inst2 $end
$var wire 1 , op1 $end
$var wire 1 / op2 $end
$var reg 1 2 carry $end
$var reg 1 3 sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
b1001 &
b11 %
0$
b0 #
0"
0!
$end
#100
1!
10
1*
1$
1(
1.
1'
1-
#200
b1 #
#300
12
1+
00
0*
11
1,
1$
1)
1/
0(
0.
#400
b10 #
#500
0!
02
0+
13
1"
01
0,
0$
0'
0-
#600
b11 #
#700
11
1,
0$
0)
0/
1(
1.
#800
b100 #
