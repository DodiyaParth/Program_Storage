$date
	Mon Oct 15 23:13:12 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb5 $end
$var wire 4 ! result [3:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 1 $ cin $end
$scope module A $end
$var wire 4 % a [3:0] $end
$var wire 4 & b [3:0] $end
$var wire 4 ' c [3:0] $end
$var wire 1 ( cin $end
$var wire 4 ) cout [3:0] $end
$var wire 4 * result [3:0] $end
$scope module A $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 ( c $end
$var wire 1 - c1 $end
$var wire 1 . ca $end
$var wire 1 / co $end
$var wire 1 0 sum $end
$var wire 1 1 sum1 $end
$var wire 1 2 sumo $end
$scope module A $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 / co $end
$var wire 1 2 sum $end
$upscope $end
$scope module B $end
$var wire 1 2 a $end
$var wire 1 ( b $end
$var wire 1 - co $end
$var wire 1 1 sum $end
$upscope $end
$upscope $end
$scope begin genblk1 $end
$scope module A $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 c $end
$var wire 1 6 c1 $end
$var wire 1 7 ca $end
$var wire 1 8 co $end
$var wire 1 9 sum $end
$var wire 1 : sum1 $end
$var wire 1 ; sumo $end
$scope module A $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 8 co $end
$var wire 1 ; sum $end
$upscope $end
$scope module B $end
$var wire 1 ; a $end
$var wire 1 5 b $end
$var wire 1 6 co $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk01 $end
$scope module A $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > c $end
$var wire 1 ? c1 $end
$var wire 1 @ ca $end
$var wire 1 A co $end
$var wire 1 B sum $end
$var wire 1 C sum1 $end
$var wire 1 D sumo $end
$scope module A $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 A co $end
$var wire 1 D sum $end
$upscope $end
$scope module B $end
$var wire 1 D a $end
$var wire 1 > b $end
$var wire 1 ? co $end
$var wire 1 C sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk001 $end
$scope module A $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 G c $end
$var wire 1 H c1 $end
$var wire 1 I ca $end
$var wire 1 J co $end
$var wire 1 K sum $end
$var wire 1 L sum1 $end
$var wire 1 M sumo $end
$scope module A $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 J co $end
$var wire 1 M sum $end
$upscope $end
$scope module B $end
$var wire 1 M a $end
$var wire 1 G b $end
$var wire 1 H co $end
$var wire 1 L sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0M
0L
zK
0J
0I
0H
0G
0F
0E
0D
0C
zB
0A
0@
0?
0>
0=
0<
0;
0:
z9
08
07
06
05
04
03
02
01
z0
0/
0.
0-
0,
0+
b0 *
b0 )
0(
b0 '
b0 &
b0 %
0$
b0 #
b0 "
b0 !
$end
#1
1I
1H
1G
1@
1?
1>
17
16
15
1.
b1111 )
1-
0:
0C
0L
12
1;
1D
1M
1,
14
1=
1F
b1111 '
01
b0 !
b0 *
1$
1(
#3
0>
0G
05
07
0@
0I
0.
b0 )
0:
06
0C
0?
0L
0H
0;
0D
0M
0,
04
0=
0F
12
0/
b0 '
11
b1 !
b1 *
0-
1+
0$
0(
b1 "
b1 %
#5
1G
1@
1?
1>
17
0C
1I
18
1D
1J
15
1:
1L
1,
14
1=
1F
1.
b1111 )
0;
0M
12
b1111 '
01
b1010 !
b1010 *
1-
13
1E
0+
1$
1(
b1010 "
b1010 %
#7
0L
0G
0@
1C
0?
0:
02
0D
05
0,
0=
0.
b1010 )
b1010 '
01
b100 !
b100 *
0-
0$
0(
b1010 #
b1010 &
#9
0C
1L
0I
0>
1M
0J
0:
07
b0 )
04
0F
0;
08
b0 '
11
b1001 !
b1001 *
03
1$
1(
b1111 #
b1111 &
b1000 "
b1000 %
#15
